res <- preprocess(F, 0.1)
train <- res$train
train <- train[, -Id]
train <- train[, -"Id"]
train$Id <- NULL
train
null <- lm(SalePrice ~ 1, train)
full <- lm(SalePrice ~ ., train)
step(null, scope = list(lower = null, upper = full), direction = "forward")
summary(lm(formula = SalePrice ~ OverallQual + GrLivArea + Neighborhood +
BsmtQual + RoofMatl + BsmtFinSF1 + MSSubClass + BsmtExposure +
KitchenQual + Condition2 + SaleCondition + OverallCond +
YearBuilt + LotArea + ExterQual + GarageArea + PoolArea +
TotalBsmtSF + BldgType + Functional + BedroomAbvGr + Condition1 +
LandSlope + Exterior1st + MasVnrArea + MSZoning + LandContour +
LotConfig + LowQualFinSF + GarageFinish + ScreenPorch + Street +
KitchenAbvGr + GarageCars + YearRemodAdd + Fireplaces + MoSold +
GarageQual + GarageCond + WoodDeckSF + `1stFlrSF` + TotRmsAbvGrd +
BsmtFullBath, data = train))
step(null, scope = list(lower = null, upper = full), direction = "both")
summary(lm(formula = SalePrice ~ OverallQual + GrLivArea + Neighborhood +
BsmtQual + RoofMatl + BsmtFinSF1 + MSSubClass + BsmtExposure +
KitchenQual + Condition2 + SaleCondition + OverallCond +
YearBuilt + LotArea + ExterQual + GarageArea + PoolArea +
TotalBsmtSF + BldgType + Functional + BedroomAbvGr + Condition1 +
LandSlope + Exterior1st + MasVnrArea + MSZoning + LandContour +
LotConfig + LowQualFinSF + GarageFinish + ScreenPorch + Street +
KitchenAbvGr + GarageCars + YearRemodAdd + Fireplaces + MoSold +
GarageQual + GarageCond + WoodDeckSF + `1stFlrSF` + TotRmsAbvGrd +
BsmtFullBath, data = train))
library(randomForest)
?randomForest
train
?sample
n <- sample_n(train, nrow(train) * 0.8)
?sample
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, ]
test1 <- train[-n, ]
rand <- randomForest(SalePrice ~ ., data = train1)
train1$`1stFlrSF`
rand <- randomForest(SalePrice ~ ., data = train)
lm(SalePrice ~ ., train1)
names(train1$1`1stFlrSF`) <- "FirstFlrSD"
names(train1$`1stFlrSF`) <- "FirstFlrSf"
rand <- randomForest(SalePrice ~ ., data = train1)
train1
names(train1)
names(train1$`1stFlrSF`) <- c("FirstFlrSf")
names(train1)
names(train)[names(train) == '1stFlrSF'] <- 'FirstFloorSF'
rand <- randomForest(SalePrice ~ ., data = train1)
names(train1)
colnames(train)[names(train) == '1stFlrSF'] <- 'FirstFloorSF'
names(train1)
colnames(train)[names(train) == '1stFlrSF'] <- 'FirstFloorSF'
names(train1)
colnames(train1)[names(train1) == '1stFlrSF'] <- 'FirstFloorSF'
names(train1)
rand <- randomForest(SalePrice ~ ., data = train1)
colnames(train1)[names(train1) == '2ndFlrSF'] <- 'SecondFloorSF'
rand <- randomForest(SalePrice ~ ., data = train1)
colnames(train1)[names(train1) == '3SsnPorch'] <- 'ThirdSsnPorch'
rand <- randomForest(SalePrice ~ ., data = train1)
colnames(train1$MSSubClass) <- "MsZoningSubClass"
rename_cols <- function(df){
colnames(df)[names(df) == '1stFlrSF'] <- 'FirstFloorSF'
colnames(df)[names(df) == '2ndFlrSF'] <- 'SecondFloorSF'
colnames(df)[names(df) == '3SsnPorch'] <- 'ThirdSsnPorch'
return(df)
}
source("preprocess.R")
res <- preprocess(F, 0.1)
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, ]
test1 <- test[-n, ]
rand <- randomForest(SalePrice ~ ., data = train1)
colnames(train1)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
rename_train <- rename_cols(train)
rename_test <- rename_cols(test)
source("preprocess.R")
res <- preprocess(F, 0.1)
train1 <- train[n, ]
test1 <- test[-n, ]
rand <- randomForest(SalePrice ~ ., data = train1)
train1
train <- res$train
test <- res$test
train1 <- train[n, ]
test1 <- test[-n, ]
rand <- randomForest(SalePrice ~ ., data = train1)
predict(rand, test1)
predict(rand, subset(test1, select = -c("SalePrice")))
predict(rand, subset(test1, select = -"SalePrice"))
predict(rand, test1[, !names(test1) %in% c("SalePrice")])
test1[, !names(test1) %in% c("SalePrice")]
res <- preprocess(T, 0.1)
train <- res$train
test <- res$test
train1 <- train[n, ]
test1 <- test[-n, ]
rand <- randomForest(SalePrice ~ ., data = train1)
predict(rand, test1[, !names(test1) %in% c("SalePrice")])
res <- preprocess(T, 0.1)
train <- res$train
test <- res$test
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, ]
test1 <- test[-n, ]
class(train1)
sapply(train1, class)
sapply(test1, class)
?knn
library(class)
?knn
install.packages("caret")
install.packages("fnn")
install.packages("FNN")
library(FNN)
train
train[, -1]
train
train[, ncol(train)]
train[, -ncol(train)]
y <- train[, ncol(train)]
x <- train[, -c(1, ncol(train))]
x
knn.reg(train = x, y = y)
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, -1]
test1 <- test[-n, -c(1, ncol(test))]
train1
test1
ncol(train1)
ncol(test1)
train1 <- train[n, -1]
test1 <- test[-1, -c(1, ncol(test))]
train1 <- train[n, -1]
ncol(test1)
train1 <- train[n, -c(1, ncol(train))]
train1
response
response <- train[n, ncol(train)]
response
test1 <- train[-n, -1]
train1 <- train[n, -c(1, ncol(train))]
response <- train[n, ncol(train)]
test1 <- train[-n, -1]
true <- train[-n, ncol(train)]
ncol(train1)
ncol(test1)
test1 <- train[-n, -c(1, ncol(train))]
ncol(test1)
train1 <- train[n, -c(1)]
test1 <- train[-n, -c(1, ncol(train))]
true <- train[-n, ncol(train)]
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i], levels(test1[, i]))))
levels(test1[, i]) <- unique(union(levels(train1[, i], levels(test1[, i]))))
}
}
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
levels(test1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train1)
preds <- predict(rand, test1)
preds
true
unlist(true)
unlist(true) - preds
res <- preprocess(F, 0.1)
train <- res$train
test <- res$test
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, -c(1)]
test1 <- train[-n, -c(1, ncol(train))]
true <- train[-n, ncol(train)]
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
levels(test1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train1)
randomForest::rfcv(train[, -c(1, ncol(train))], train[ , ncol(train)] )
randomForest::rfcv(train[, -c(1, ncol(train))], train[ ,ncol(train)] )
train[n, -c(1)]
train[n, -c(1, ncol(train))]
train[-n, ncol(train)]
train[, ncol(train)]
?rfcv
rfcv(trainx = train[, -c(1, ncol(train))], trainy = train[, ncol(train)])
x <- train[-n, ncol(train)]
y <- train[, ncol(train)]
dim(x)
x <- train[, -c(1, ncol(train))]
dim(x)
dim(y)
rfcv(x, y)
x
rfcv(as.data.frame(x), as.data.frame(y))
rfcv(matrix(x), matrix(y))
matrix(x)
?predict.randomForest
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, -c(1, ncol(train))]
test1 <- train[-n, -c(1, ncol(train))]
true <- train[-n, ncol(train)]
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
levels(test1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train1)
res <- preprocess(F, 0.1)
train <- res$train
test <- res$test
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, -c(1, ncol(train))]
test1 <- train[-n, -c(1, ncol(train))]
true <- train[-n, ncol(train)]
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
levels(test1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train1)
train1
train1 <- train[n, -c(1)]
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
levels(test1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train1)
# Kaggle Housing Competition
library(tidyverse)
source("preprocess.R")
# This file houses the code for the non-parametric approach
# Get the data in
res <- preprocess(T, 0.1)
train <- res$train
test <- res$test
n <- sample(1:nrow(train), size = nrow(train) * 0.8)
train1 <- train[n, -c(1)]
# response <- train[n, ncol(train)]
test1 <- train[-n, -c(1, ncol(train))]
true <- train[-n, ncol(train)]
for(i in 1:ncol(train1)-1){
if(is.factor(unlist(train1[, i]))){
levels(train1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
levels(test1[, i]) <- unique(union(levels(train1[, i]), levels(test1[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train1)
preds <- predict(rand, test1)
# MSE
mean((preds - true)^2)
preds
preds - true
?randomForest
rand <- randomForest(SalePrice ~ ., train1, ntree = 2000, importance = T)
preds <- predict(rand, test1)
mean((preds - true)^2)
sqrt(mean((preds - true)^2))
train <- res$train
test <- res$test
for(i in 1:ncol(train) - 1){
if(is.factor(unlist(train[, i]))){
levels(train1[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
levels(test1[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
}
}
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(train1[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
levels(test1[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
}
}
ncol(train)
ncol(test)
test[, 74]
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
# levels(train1[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
# levels(test1[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
}
}
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(train[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
levels(test[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train, ntree = 2000, importance = T)
preds <- predict(rand, test)
res <- preprocess(T, 0.1)
train <- res$train
test <- res$test
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(train[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
levels(test[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
}
}
rand <- randomForest(SalePrice ~ ., train, ntree = 20, importance = T)
preds <- predict(rand, test)
test
train
sapply(test, class)
sapply(train, class)
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 20, importance = T)
preds <- predict(rand, test)
res <- preprocess(F, 0.1)
train <- res$train
test <- res$test
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(train[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
levels(test[, i]) <- unique(union(levels(train[, i]), levels(test[, i])))
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 20, importance = T)
preds <- predict(rand, test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <-levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 20, importance = T)
preds <- predict(rand, test)
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
res <- preprocess(F, 0.1)
train <- res$train
test <- res$test
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
print(levels(test))
}
}
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
print(paste(i, levels(test)))
}
}
test[, 3]
test$MSZoning
source("preprocess.R")
res <- preprocess(F, 0.1)
train <- res$train
test <- res$test
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
res <- preprocess(T, 0.1)
train <- res$train
test <- res$test
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
levels(test$MSZoning)
levels(train$MSZoning)
levels(train$MSZoning) == levels(test$MSZoning)
levels(train[, i])
levels(unlist(train[, i]))
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(unlist(test[, i])) <- levels(unlist(train[, i]))
}
}
train_2 <- as.data.frame(train)
train_2[, 3]
levels(train_2[, 3])
res <- preprocess(T, 0.1)
train <- as.data.frame(res$train)
test <- as.data.frame(res$test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
res <- preprocess(F, 0.1)
train <- as.data.frame(res$train)
test <- as.data.frame(res$test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
source("preprocess.R")
res <- preprocess(F, 0.1)
train <- as.data.frame(res$train)
test <- as.data.frame(res$test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
res <- preprocess(T, 0.1)
train <- as.data.frame(res$train)
test <- as.data.frame(res$test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 2, importance = T)
preds <- predict(rand, test)
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 1000, importance = T)
prds
preds
results <- data.frame("Id" <- test$Id, "SalePrice" <- preds)
write_csv(results, "submission.csv")
results
results <- data.frame("Id" <- as.vector(test$Id), "SalePrice" <- c(preds))
write_csv(results, "submission.csv")
write_csv(results, "submission.csv")
test$Id
results <- data.frame(test$Id, preds)
colnames(results) <- c("Id", "SalePrice")
write_csv(results, "submission.csv")
write_csv(results, "submission.csv")
?write_csv
results <- data.frame(int(test$Id), preds)
results <- data.frame(as.integer(test$Id), preds)
colnames(results) <- c("Id", "SalePrice")
write_csv(results, "submission.csv")
knn.cv(train[, -c(nrow(train))], train[, nrow(train)])
knn.cv(train[, -c(ncol(train))], train[, ncol(train)])
knn.reg(train)
class::knn(train[, -c(ncol(train))], test, cl = train[, ncol(train)])
train[, -c(ncol(train))]
test
train[, ncol(train)]
class::knn.cv(train[, -c(ncol(train))], train[, ncol(train)])
class::knn.cv(matrix(train[, -c(ncol(train))]), vector(train[, ncol(train)]))
class::knn.cv(matrix(train[, -c(ncol(train))]), as.vector(train[, ncol(train)]))
l <- matrix(train[, -c(ncol(train))])
m <- as.vector(train[, ncol(train)])
dim(l)
dim(m)
m
l
l[1,1]
class::knn.cv(train[, -c(ncol(train))], as.vector(train[, ncol(train)]))
t
t
setwd("C:/Users/Student/Documents/Fall 2017/Data Mining/Kaggle/sys6018-competition-titanic/")
train <- read.csv("train.csv")
sapply(train, class)
train$SexNum <- as.integer(train$Sex == "male")
mean_age <- mean(train$Age, na.rm = T)
train$Age[is.na(train$Age)] <- mean_age
train$AgeScale <- (train$Age - mean(train$Age))/sd(train$Age)
X.pred <- as.matrix(select(train, AgeScale, Pclass, SexNum, Cabin))
X.cl <- as.vector(train$Survived)
predictions <- knn.cv(train = X.pred, cl = X.cl, k = 1)
library(caret)
caret::knnreg(train)
?caret::knnreg
knnreg(train[, -c(ncol(train))], y = train[, ncol(train)])
mod <- knnreg(train[, -c(ncol(train))], y = train[, ncol(train)])
mod
predict(mod, test)
setwd("C:/Users/Student/Documents/Fall 2017/Data Mining/Kaggle/sys6018-competition-house-prices/")
source("preprocess.R")
res <- preprocess(T, 0.1)
train <- as.data.frame(res$train)
test <- as.data.frame(res$test)
mod <- knnreg(train[, -c(ncol(train))], y = train[, ncol(train)])
predict(mod, test)
knnreg(SalePrice ~ . - Id, data = train)
predict(mod, test)
test
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
knnreg(SalePrice ~ . - Id, data = train)
predict(mod, test)
