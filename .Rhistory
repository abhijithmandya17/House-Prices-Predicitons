data <- getURL(url, ssl.verifypeer=FALSE)
all.scores <- read.csv(textConnection(data))
head(all.scores)
par(mfrow=c(1,2))
hist(all.scores$score)
qqline(all.scores$score)
qqline(all.scores$score)
qqline(all.scores$score)
hist(all.scores$score)
qqline(all.scores$score)
mean(all.scores)
mean(all.scores$score)
sd(all.scores$score)
N(47.3, 9.3)
library(descstat)
library(pastecs)
N(47.3,9.30)
rnorm(500,47.3,9.3)
a <- rnorm(500, 47.3, 9.3)
plot(rnorm)
pnorm(50, mean=47.3, sd=9.3)
shiny::runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp("UVA Grades App")
runApp('UVA Grades App/app-files')
runApp("UVA Grades App/app-files")
# Script to play around with various ideas for the grades app
shiny::runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
#theme_set(theme_custom()
runApp('UVA Grades App/app-files')
install.packages("ggthemes")
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
scale_fill_hc("darkunica"))
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
args(ggtitle)
args(theme_solarized_2)
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
library(shiny)
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
install.packages("reshape")
library(reshape)
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('UVA Grades App/app-files')
runApp('app-files')
Q
runApp('UVA Grades App/app-files')
#Set up variables to convert from the grade selection (A+) to the grade format (A_plus)
grades <- c("A_tot", "A_minus", "B_plus", "B", "B_minus", "C_plus", "C", "C_minus", "Not_Passing")
names(grades) <- c("A+/A", "A-", "B+", "B", "B-", "C+", "C", "C-", "Not Passing")
grades["A+/A"]
runApp('UVA Grades App/app-files')
args(matrix)
mat <- matrix(data = c(1/3, 2/3, 3/4, 1/4), nrow = 2)
mat
mat <- matrix(data = c(1/3, 3/4, 2/3, 1/4), nrow = 2)
mat
args(exp)
4^4
2^4
mat^2
mat^1
mat %*% mat %*% mat
getwd()
setwd("/Fall 2016/STAT 5120/Homework 2")
setwd("C:/Users/Student/Documents/Fall 2016/STAT 5120/Homework 2")
setwd("C:/Users/Student/Documents/Fall 2016/STAT 5120/Homework 2")
setwd("C:/Users/Student/Documents/Fall 2016/STAT 5120/Homework 2")
i <- diag(4)
i
q <- matrix(c(0,0,0,.25,.5,0,0,0,.5,0,0,0,0,.8,.6,.5), nrows = 4)
q <- matrix(c(0,0,0,.25,.5,0,0,0,.5,0,0,0,0,.8,.6,.5), nrow = 4)
q
solve(i - q)
res <- solve(i - q)
res[1]
res[1,]
sum(res[1,])
q <- matrix(c(0,0,1,.5,0,0,0,.2,0), nrow = 3)
i < diag(3)
i <- diag(3)
q
solve(i - q)
s <- matrix(c(.5,0,0,0,.8,.6), nrow = 3)
s
res <- solve(i - q)
res
res2 <- res %*% s
res2
s
q
res
res %*% q
q
res
i
res %*% (i - q)
s <- matrix(c(.5,0,0,0,.8,0), nrow = 3)
res2 <- res %*% s
res2
install.packages(faraway)
install.packages("faraway")
mat <- matrix(c(1,1,-1,4), nrow = 2)
mat
solve(mat)
res <- solve(mat)
mat %*% res
mat <- matrix(c(-1,4,0,1,-3,4,0,1,-4), nrow = 2)
mat <- matrix(c(-1,4,0,1,-3,4,0,1,-4), nrow = 3)
mat
mat <- matrix(c(-1,4,0,1,-5,4,0,1,-4), nrow = 3)
eigen(mat)
mat <- matrix(c(1,1,1,-1,2,8,1,-6,8), nrow = 3)
res <- solve(mat)
res
mat <- matrix(c(1,1,1,-1,2,8,1,-6,8))
mat
mat <- matrix(c(1,1,1,-1,2,8,1,-6,8), nrow = 3)
mat
inv <- solve(mat)
inv
mat <- matrix(c(-3,0,1,1,-3,2,1,2,-4), nrow = 3)
mat
mat_neg = -mat
mat_neg
solve(mat_neg)
mat <- matrix(c(-2,0,1,1,-1,1,1,1-3), nrows = 3)
mat <- matrix(c(-2,0,1,1,-1,1,1,1-3), nrow = 3)
mat <- matrix(c(-2,0,1,1,-1,1,1,1,-3), nrow = 3)
mat
mat_neg <- -mat
mat_neg
mat_neg
solve(mat_neg)
mat <- matrix(c(0, .5, 0,0,0,0,0,.5,0,.,5,0,0,0,0,0,.5,0,0,0,0,0,0,0,0,0,.5,0,0,0,0,0,.5,0,0,0,0,0,0,0,.5,0,.5,0,0,0,0,0,.5,0), nrow = 7)
mat <- matrix(c(0, 1/2, 0,0,0,0,0,1/2,0,1/2,0,0,0,0,0,1/2,0,0,0,0,0,0,0,0,0,1/2,0,0,0,0,0,1/2,0,0,0,0,0,0,0,1/2,0,1/2,0,0,0,0,0,1/2,0), nrow = 7)
mat
s <- matrix(c(1/2, 0,0,0,0,0,0,0,0,1/2,1/2,0,0,0,0,0,0,0,0,0,1/2,0,0,0,0,0,0,0), nrow = 7)
s
i <- daig(7)
i <- diag(7)
i
solve(i - mat)
res <- solve(i - mat)
res %*% s
s %*% res
res
res %*% s
mat <- matrix(c(0, 1/2, 0,0,0,0,0,1/2,0,1/2,0,0,0,0,0,1/2,0,0,0,0,0,0,0,0,0,1/2,0,0,0,0,0,1/2,0,1/2,0,0,0,0,0,1/2,0,1/2,0,0,0,0,0,1/2,0), nrow = 7)
res <- solve(i - mat)
res %*% s
#Question 1
masim <- function(sigs, sigsq, T){
#Find the number of previous terms we rely on
q<-length(sigs)
#Generate our white noise
noise<-rnorm(T+q, sd=sqrt(sigsq))
#Get our time series array set up
x<-c(noise[1:q],rep(0, T))
#Look to generate our series
for(i in (q+1):(T+q)){
x[i]<-noise[i]+(noise[i-(1:q)] %*% sigs)
}
x<-x[(q+1):(T+q)]
return(x)
}
x <- masim(c(0.5,2), 1, 10000)
acf(x)
y <- masim(c(0.5,2), 1, 200)
acf(y)
y <- masim(c(0.5,2), 1, 200)
acf(y)
x <- c(4,5,6,7,8,9)
y <- c(29.5, 31,32,33,36,39)
mod <- lm(y ~ x)
mod
x <- c(0,1,2,3,4,5)
y <- c(6,9,9.8,12,12.7,14.3)
mod <- lm(y ~ x)
mod
power.aw<-function(sigsq,omega)
{
aw<-sigsq*(4/9*cos(2*pi*omega)^2-4/3*cos(2*pi*omega)+4/9)
}
frequency<-seq(0,0.5,by=0.01)
power.aw<-function(sigsq,omega)
{
aw<-sigsq*(4/9*cos(2*pi*omega)^2-8/9*cos(2*pi*omega)+4/9)
}
frequency<-seq(0,0.5,by=0.01)
aw1<-power.aw(1,frequency)
plot(frequency,aw1, type="l", main="Power Transfer Function")
1 + 2
install.packages("tidyverse")
tidyverse::tidyverse_update(recursive = TRUE)
tidyverse::tidyverse_update()
library("acepack", lib.loc="~/R/win-library/3.3")
library("astsa", lib.loc="~/R/win-library/3.3")
library("assertthat", lib.loc="~/R/win-library/3.3")
detach("package:astsa", unload=TRUE)
detach("package:assertthat", unload=TRUE)
detach("package:acepack", unload=TRUE)
install.packages(c("assertthat", "BH", "chron", "colorspace", "data.table", "DBI", "digest", "evaluate", "formatR", "ggthemes", "Hmisc", "htmlTable", "htmltools", "knitr", "lawstat", "leaps", "lme4", "markdown", "mvtnorm", "R6", "Rcpp", "RcppEigen", "reshape", "reshape2", "shiny", "stringi", "survival", "VGAM", "viridis", "yaml"))
install.packages(c("assertthat", "BH", "chron", "colorspace", "data.table", "DBI", "digest", "evaluate", "formatR", "ggthemes", "Hmisc", "htmlTable", "htmltools", "knitr", "lawstat", "leaps", "lme4", "markdown", "mvtnorm", "R6", "Rcpp", "RcppEigen", "reshape", "reshape2", "shiny", "stringi", "survival", "VGAM", "viridis", "yaml"))
library("tidyverse")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
tidyverse()
help("tidyverse")
library(ggplot2)
version()
R.version
R.version
R.version
R.version()
R.version
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(tidyvers)
library(tidyvers)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
help("install.packages")
help("install.packages")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr)
library(ggplot2)
install.packages("dplyr")
sessionInfo()
library(tidyverse)
tidyverse::tidyverse_update()
tidyverse::tidyverse_update()
?assignOps
updateR()
library(Rcpp)
getwd()
sourceCpp(file = "test.cpp")
sourceCpp(file = "test.cpp")
fib(3)
library(projmanr)
taskdata1
critical_path(taskdata1)
library(tidyverse)
source("preprocess.R")
source("preprocess.R")
setwd("C:/Users/Student/Documents/Fall 2017/Data Mining/Kaggle/sys6018-competition-house-prices/")
add_None <- function(df){
for(i in colnames(df)){
text <- sprintf("df$\'%s\'", i)
res <- eval(parse(text = text))
if(is.character(res)){
text2 <- sprintf("df$\'%s\'[is.na(df$\'%s\')] <- \"None\"", i, i)
eval(parse(text = text2))
}
}
return(df)
}
train <- read_csv("train.csv")
test <- read_csv("test.csv")
View(train)
complete_train <- train %>%
rename_cols()
# Function to drop problem columns based on density of NA values
drop_cols <- function(df, threshold){
problem_columns <- c()
for(i in 1:ncol(df)){
if(sum(is.na(df[, i]))/nrow(df) > threshold){
print(paste("Dropping: ", names(df[, i])))
problem_columns <- c(problem_columns, names(df[, i]))
}
}
return(problem_columns)
}
# Converts all characters columsn to factors
to_factor <- function(df){
for(i in colnames(df)){
text <- sprintf("df$\'%s\'", i)
res <- eval(parse(text = text))
if(is.character(res)){
text2 <- sprintf("df$\'%s\' <- as.factor(df$\'%s\')", i, i)
eval(parse(text = text2))
}
}
return(df)
}
# Function to fill in numeric NA with the mean
fill_na_num <- function(df){
for(i in colnames(df)){
text <- sprintf("df$\'%s\'", i)
res <- eval(parse(text = text))
if(is.numeric(res)){
text2 <- sprintf("df$\'%s\'[is.na(df$\'%s\')] <- mean(df$\'%s\', na.rm = T)", i, i, i)
eval(parse(text = text2))
}
}
return(df)
}
# Fill in the missing categorical data with the most common category
fill_na_fac <- function(df){
for(i in colnames(df)){
text <- sprintf("df$\'%s\'", i)
res <- eval(parse(text = text))
if(is.factor(res)){
text2 <- sprintf("df$\'%s\'[is.na(df$\'%s\')] <- \"None\"", i, i)
eval(parse(text = text2))
}
}
return(df)
}
# Rename the problematic columns
rename_cols <- function(df){
colnames(df)[names(df) == '1stFlrSF'] <- 'FirstFloorSF'
colnames(df)[names(df) == '2ndFlrSF'] <- 'SecondFloorSF'
colnames(df)[names(df) == '3SsnPorch'] <- 'ThirdSsnPorch'
return(df)
}
# Add none's
add_None <- function(df){
var_names <- c("BsmtQual",
"BsmtCond",
"BsmtExposure",
"BsmtFinType1",
"BsmtFinType2",
"FireplaceQu",
"GarageType",
"GarageFinish",
"GarageQual",
"GarageCond",
"PoolQC",
"MiscFeature",
"Fence")
for(i in var_names){
text <- sprintf("df$\'%s\'", i)
res <- eval(parse(text = text))
if(is.character(res)){
text2 <- sprintf("df$\'%s\'[is.na(df$\'%s\')] <- \"None\"", i, i)
eval(parse(text = text2))
}
}
return(df)
}
complete_train <- train %>%
rename_cols()
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor() %>%
fill_na_num() %>%
fill_na_fac()
warnings()
complete_train <- train %>%
rename_cols() %>%
add_None() # %>%
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor() # %>%
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor()  %>%
fill_na_num() # %>%
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor()  %>%
fill_na_num() %>%
fill_na_fac()
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor()  %>%
fill_na_num() %>%
fill_na_fac()
train <- read_csv("train.csv")
test <- read_csv("test.csv")
rename_train <- rename_cols(train)
rename_test <- rename_cols(test)
factor_train <- to_factor(rename_train)
factor_test <- to_factor(rename_test)
numeric_complete_train <- fill_na_num(filtered_train)
numeric_complete_test <- fill_na_num(filtered_test)
problem_columns <- drop_cols(train, cutoff)
filtered_train <- factor_train[ , !(names(factor_train) %in% problem_columns)]
filtered_test <- factor_test[ , !(names(factor_test) %in% problem_columns)]
problem_columns <- drop_cols(train, cutoff)
problem_columns <- drop_cols(train, 0.1)
filtered_train <- factor_train[ , !(names(factor_train) %in% problem_columns)]
filtered_test <- factor_test[ , !(names(factor_test) %in% problem_columns)]
numeric_complete_train <- fill_na_num(filtered_train)
numeric_complete_test <- fill_na_num(filtered_test)
complete_train <- fill_na_fac(numeric_complete_train)
complete_test <- fill_na_fac(numeric_complete_test)
fill_na_fac <- function(df){
for(i in colnames(df)){
text <- sprintf("df$\'%s\'", i)
res <- eval(parse(text = text))
if(is.factor(res)){
text2 <- sprintf("df$\'%s\'[is.na(df$\'%s\')] <- names(which.max(table(df$\'%s\')))", i, i, i)
eval(parse(text = text2))
}
}
return(df)
}
complete_test <- fill_na_fac(numeric_complete_test)
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor()  %>%
fill_na_num() %>%
fill_na_fac()
complete_train <- train %>%
rename_cols() %>%
add_None() %>%
to_factor()  %>%
fill_na_num() %>%
fill_na_fac()
complete_test <- test %>%
rename_cols() %>%
add_None() %>%
to_factor()  %>%
fill_na_num() %>%
fill_na_fac()
ret$train <- complete_train
ret$test <- complete_test
ret <- list()
ret$train <- complete_train
ret$test <- complete_test
library(tidyverse)
source("preprocess.R")
res <- preprocess(0.1)
train <- as.data.frame(res$train)
test <- as.data.frame(res$test)
for(i in 1:(ncol(train) - 1)){
if(is.factor(unlist(train[, i]))){
levels(test[, i]) <- levels(train[, i])
}
}
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 1000, importance = T)
library(randomForest)
rand <- randomForest(SalePrice ~ . - Id, train, ntree = 1000, importance = T)
preds <- predict(rand, test)
results <- data.frame(as.integer(test$Id), preds)
colnames(results) <- c("Id", "SalePrice")
write_csv(results, "submission.csv")
